# =============================================================================
#
# Author:	Kjell Swedin
# Purpose:	Drive the calculations of the entire suite of disturbances against the fuelbeds that ship with FFT
#                   Run all disturbances. Generated fuelbeds go to GENERATED_FUELBED_DIR
#                   Run FCCS on the generated fuelbeds
#                    - produces FCCS results .csv file
#                    - produces a Consume loadings file
#                    - build landfire gridfile (.csv) from the FCCS and Consume results
#                    - build fofem input file (.csv) from the FCCS and Consume results
#
# =============================================================================
import os
import sys
import zipfile
import shutil
import requests

FUELBED_ZIP = 'FFT_FUELBEDS.zip'
FUELBED_DIR = 'fuelbeds'
GENERATED_FUELBED_DIR = 'out'
DELIVERABLE_DIR = 'deliverables'
FCCS = 'fuelbed.jar'
ARTIFACTORY = 'http://172.16.0.120:8081/artifactory/generic-local'

# =============================================================================
#   Remove all the artifacts generated by running this script -- "make clean"
# =============================================================================
CLEAN = 'clean'
def clean():
    for i in [FCCS, FUELBED_ZIP]:
        try:
            os.remove(i)
        except: pass    
    for i in [FUELBED_DIR, GENERATED_FUELBED_DIR, DELIVERABLE_DIR]:
        try:
            shutil.rmtree(i)
        except: pass
        
def is_clean(argv):
    yes_clean = False
    for j in [i.lower() for i in argv]:
        if CLEAN in j:
            yes_clean = True
            break
    return yes_clean

# ++++++++++++++++++++++++++++++++++++++++++
#  Get the set of fuelbeds from artifactory that FFT uses
# ++++++++++++++++++++++++++++++++++++++++++
def get_fuelbeds():
    success = True
    cmd = 'wget {}/Fuelbeds/3.0/{}'.format(ARTIFACTORY ,FUELBED_ZIP)
    os.system(cmd)
    if os.path.exists(FUELBED_ZIP):
        with zipfile.ZipFile(FUELBED_ZIP, 'r') as zip:
            zip.extractall('.')
    else:
        print('\nError: could not retrieve zipfile\n')
        success = False
    return success

# ++++++++++++++++++++++++++++++++++++++++++
#  Run all the disturbances against the chosen fuelbeds
#       This runs in a different directory but generates output in
#       this directory. This has advantages but you need to be very
#       careful with path/file specifications.
# ++++++++++++++++++++++++++++++++++++++++++
def invoke_run_disturbance():
    # NOTE: output is suppressed!!!
    cmd = ' python3 ../run_disturbance/scripts/main.py {}/*.xml'.format(FUELBED_DIR)
    os.system(cmd)

# ++++++++++++++++++++++++++++++++++++++++++
#  Get the most recent FCCS from artifactory and run it on the generated fuelbeds
# ++++++++++++++++++++++++++++++++++++++++++
def get_and_run_fccs():
    def latest(r):
        builds = []
        # line looks like - '<a href="504/">504/</a>   29-Dec-2016 16:33    -'
        for i in r.iter_lines():
            i = i.decode('latin_1')
            try:
                builds.append(int(i.split('>')[1].split('/')[0]))
            except:
                pass
        return max(builds)
    
    query = '{}/fccs'.format(ARTIFACTORY)
    r = requests.get(query)
    latest_build = latest(r)
    cmd = 'wget {}/fccs/{}/fuelbed.jar'.format(ARTIFACTORY ,latest_build)
    os.system(cmd)
    
    if os.path.exists(FCCS):
        cmd = 'java -jar {} {}/*.xml 2> /dev/null'.format(FCCS, GENERATED_FUELBED_DIR)
        os.system(cmd)
        cmd = 'mv consume_loadings.csv fccs_summary.csv {}'.format(DELIVERABLE_DIR)
        os.system(cmd)
    else:
        print('\nError: could not retrieve FCCS jar file\n')


# ++++++++++++++++++++++++++++++++++++++++++
#  Start...
# ++++++++++++++++++++++++++++++++++++++++++
clean()
if len(sys.argv) > 1 and is_clean(sys.argv):
    exit(0)
else:
    if get_fuelbeds():
        invoke_run_disturbance()
        os.makedirs(DELIVERABLE_DIR)
        get_and_run_fccs()
        os.system('python3 build_fofem_inputs.py')
        os.system('python3 build_landfire_gridfile.py')
